name: Site

on:
  pull_request:
    branches: main
    paths:
      - 'docs/**'
      - 'packages/site/**'
  push:
    branches: main
    paths:
      - 'docs/**'
      - 'packages/site/**'

jobs:
  site:
    name: Publish Site
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-store
        run: echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Use pnpm store
        uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: |
            ~/.cache/Cypress
            ${{ steps.pnpm-store.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build Production Site
        working-directory: ./packages/site
        if: github.ref == 'refs/heads/main'
        run: pnpm run build

      - name: Deploy Production Site
        working-directory: ./packages/site
        if: github.ref == 'refs/heads/main'
        run: pnpm run deploy --production
        env:
          GITHUB_DEPLOYMENT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Staging Site
        working-directory: ./packages/site
        if: github.ref != 'refs/heads/main'
        run: pnpm run build --staging

      - name: Deploy Staging Site
        working-directory: ./packages/site
        if: github.ref != 'refs/heads/main'
        run: pnpm run deploy --staging
        env:
          FORMIDEPLOY_GIT_SHA: ${{ github.event.pull_request.head.sha }}
          GITHUB_DEPLOYMENT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
